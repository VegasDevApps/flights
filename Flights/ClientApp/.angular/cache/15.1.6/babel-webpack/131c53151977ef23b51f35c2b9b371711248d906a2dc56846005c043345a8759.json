{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec {\n  encodeKey(key) {\n    return encodeURIComponent(key);\n  }\n  encodeValue(value) {\n    return encodeURIComponent(value);\n  }\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n/**\n * Base class for a parameter\n */\nclass Parameter {\n  constructor(name, value, options, defaultStyle, defaultExplode) {\n    this.name = name;\n    this.value = value;\n    this.options = options;\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n  serializeValue(value, separator = ',') {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name, value, options) {\n    super(name, value, options, 'simple', false);\n  }\n  append(path) {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true;\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n  // @ts-ignore\n  serializeValue(value, separator = ',') {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name, value, options) {\n    super(name, value, options, 'form', true);\n  }\n  append(params) {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited' ? ' ' : this.options.style === 'pipeDelimited' ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name, value, options) {\n    super(name, value, options, 'simple', false);\n  }\n  append(headers) {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n  constructor(rootUrl, operationPath, method) {\n    this.rootUrl = rootUrl;\n    this.operationPath = operationPath;\n    this.method = method;\n    this._path = new Map();\n    this._query = new Map();\n    this._header = new Map();\n  }\n  /**\n   * Sets a path parameter\n   */\n  path(name, value, options) {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n  /**\n   * Sets a query parameter\n   */\n  query(name, value, options) {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n  /**\n   * Sets a header parameter\n   */\n  header(name, value, options) {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value, contentType = 'application/json') {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n  formDataValue(value) {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options) {\n    options = options || {};\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,WAAW,EAAsBC,UAAU,EAAEC,WAAW,QAAqB,sBAAsB;AAE5G;;;;AAIA,MAAMC,cAAc;EAClBC,SAAS,CAACC,GAAW;IACnB,OAAOC,kBAAkB,CAACD,GAAG,CAAC;EAChC;EAEAE,WAAW,CAACC,KAAa;IACvB,OAAOF,kBAAkB,CAACE,KAAK,CAAC;EAClC;EAEAC,SAAS,CAACJ,GAAW;IACnB,OAAOK,kBAAkB,CAACL,GAAG,CAAC;EAChC;EAEAM,WAAW,CAACH,KAAa;IACvB,OAAOE,kBAAkB,CAACF,KAAK,CAAC;EAClC;;AAEF,MAAMI,sBAAsB,GAAG,IAAIT,cAAc,EAAE;AAUnD;;;AAGA,MAAeU,SAAS;EACtBC,YAAmBC,IAAY,EAASP,KAAU,EAASQ,OAAyB,EAAEC,YAAoB,EAAEC,cAAuB;IAAhH,SAAI,GAAJH,IAAI;IAAiB,UAAK,GAALP,KAAK;IAAc,YAAO,GAAPQ,OAAO;IAChE,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,IAAI,CAACA,OAAO,CAACG,KAAK,KAAK,IAAI,IAAI,IAAI,CAACH,OAAO,CAACG,KAAK,KAAKC,SAAS,EAAE;MACnE,IAAI,CAACJ,OAAO,CAACG,KAAK,GAAGF,YAAY;;IAEnC,IAAI,IAAI,CAACD,OAAO,CAACK,OAAO,KAAK,IAAI,IAAI,IAAI,CAACL,OAAO,CAACK,OAAO,KAAKD,SAAS,EAAE;MACvE,IAAI,CAACJ,OAAO,CAACK,OAAO,GAAGH,cAAc;;EAEzC;EAEAI,cAAc,CAACd,KAAU,EAAEe,SAAS,GAAG,GAAG;IACxC,IAAIf,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKY,SAAS,EAAE;MACzC,OAAO,EAAE;KACV,MAAM,IAAIZ,KAAK,YAAYgB,KAAK,EAAE;MACjC,OAAOhB,KAAK,CAACiB,GAAG,CAACC,CAAC,IAAI,IAAI,CAACJ,cAAc,CAACI,CAAC,CAAC,CAACC,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAACtB,kBAAkB,CAACiB,SAAS,CAAC,CAAC,CAAC,CAACK,IAAI,CAACL,SAAS,CAAC;KACnH,MAAM,IAAI,OAAOf,KAAK,KAAK,QAAQ,EAAE;MACpC,MAAMqB,KAAK,GAAa,EAAE;MAC1B,KAAK,MAAMxB,GAAG,IAAIyB,MAAM,CAACC,IAAI,CAACvB,KAAK,CAAC,EAAE;QACpC,IAAIwB,OAAO,GAAGxB,KAAK,CAACH,GAAG,CAAC;QACxB,IAAI2B,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKZ,SAAS,EAAE;UAC7CY,OAAO,GAAG,IAAI,CAACV,cAAc,CAACU,OAAO,CAAC,CAACL,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAACtB,kBAAkB,CAACiB,SAAS,CAAC,CAAC;UAC3F,IAAI,IAAI,CAACP,OAAO,CAACK,OAAO,EAAE;YACxBQ,KAAK,CAACI,IAAI,CAAC,GAAG5B,GAAG,IAAI2B,OAAO,EAAE,CAAC;WAChC,MAAM;YACLH,KAAK,CAACI,IAAI,CAAC5B,GAAG,CAAC;YACfwB,KAAK,CAACI,IAAI,CAACD,OAAO,CAAC;;;;MAIzB,OAAOH,KAAK,CAACD,IAAI,CAACL,SAAS,CAAC;KAC7B,MAAM;MACL,OAAOW,MAAM,CAAC1B,KAAK,CAAC;;EAExB;;AAGF;;;AAGA,MAAM2B,aAAc,SAAQtB,SAAS;EACnCC,YAAYC,IAAY,EAAEP,KAAU,EAAEQ,OAAyB;IAC7D,KAAK,CAACD,IAAI,EAAEP,KAAK,EAAEQ,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;EAC9C;EAEAoB,MAAM,CAACC,IAAY;IACjB,IAAI7B,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKY,SAAS,EAAE;MACzCZ,KAAK,GAAG,EAAE;;IAEZ,IAAI8B,MAAM,GAAG,IAAI,CAACtB,OAAO,CAACG,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,EAAE;IACtD,IAAII,SAAS,GAAG,IAAI,CAACP,OAAO,CAACK,OAAO,GAAGiB,MAAM,KAAK,EAAE,GAAG,GAAG,GAAGA,MAAM,GAAG,GAAG;IACzE,IAAIC,iBAAiB,GAAG,KAAK;IAC7B,IAAI,IAAI,CAACvB,OAAO,CAACG,KAAK,KAAK,QAAQ,EAAE;MACnC;MACAmB,MAAM,GAAG,IAAI,IAAI,CAACvB,IAAI,GAAG;MACzB,IAAI,IAAI,CAACC,OAAO,CAACK,OAAO,IAAI,OAAOb,KAAK,KAAK,QAAQ,EAAE;QACrD8B,MAAM,GAAG,GAAG;QACZ,IAAI9B,KAAK,YAAYgB,KAAK,EAAE;UAC1B;UACAhB,KAAK,GAAGA,KAAK,CAACiB,GAAG,CAACC,CAAC,IAAI,GAAG,IAAI,CAACX,IAAI,IAAI,IAAI,CAACO,cAAc,CAACI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;UACrElB,KAAK,GAAGA,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC;UACvBW,iBAAiB,GAAG,IAAI;SACzB,MAAM;UACL;UACA/B,KAAK,GAAG,IAAI,CAACc,cAAc,CAACd,KAAK,EAAE,GAAG,CAAC;UACvC+B,iBAAiB,GAAG,IAAI;;;;IAI9B/B,KAAK,GAAG8B,MAAM,IAAIC,iBAAiB,GAAG/B,KAAK,GAAG,IAAI,CAACc,cAAc,CAACd,KAAK,EAAEe,SAAS,CAAC,CAAC;IACpF;IACAc,IAAI,GAAGA,IAAI,CAACG,OAAO,CAAC,IAAI,IAAI,CAACzB,IAAI,GAAG,EAAEP,KAAK,CAAC;IAC5C6B,IAAI,GAAGA,IAAI,CAACG,OAAO,CAAC,IAAIF,MAAM,GAAG,IAAI,CAACvB,IAAI,GAAG,IAAI,CAACC,OAAO,CAACK,OAAO,GAAG,GAAG,GAAG,EAAE,GAAG,EAAEb,KAAK,CAAC;IACvF,OAAO6B,IAAI;EACb;EAEA;EACAf,cAAc,CAACd,KAAU,EAAEe,SAAS,GAAG,GAAG;IACxC,IAAIkB,MAAM,GAAG,OAAOjC,KAAK,KAAK,QAAQ,GAAGF,kBAAkB,CAACE,KAAK,CAAC,GAAG,KAAK,CAACc,cAAc,CAACd,KAAK,EAAEe,SAAS,CAAC;IAC3GkB,MAAM,GAAGA,MAAM,CAACD,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACpCC,MAAM,GAAGA,MAAM,CAACD,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACpCC,MAAM,GAAGA,MAAM,CAACD,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACpC,OAAOC,MAAM;EACf;;AAGF;;;AAGA,MAAMC,cAAe,SAAQ7B,SAAS;EACpCC,YAAYC,IAAY,EAAEP,KAAU,EAAEQ,OAAyB;IAC7D,KAAK,CAACD,IAAI,EAAEP,KAAK,EAAEQ,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC;EAC3C;EAEAoB,MAAM,CAACO,MAAkB;IACvB,IAAI,IAAI,CAACnC,KAAK,YAAYgB,KAAK,EAAE;MAC/B;MACA,IAAI,IAAI,CAACR,OAAO,CAACK,OAAO,EAAE;QACxB,KAAK,MAAMK,CAAC,IAAI,IAAI,CAAClB,KAAK,EAAE;UAC1BmC,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAACI,CAAC,CAAC,CAAC;;OAE5D,MAAM;QACL,MAAMH,SAAS,GAAG,IAAI,CAACP,OAAO,CAACG,KAAK,KAAK,gBAAgB,GACrD,GAAG,GAAG,IAAI,CAACH,OAAO,CAACG,KAAK,KAAK,eAAe,GAC1C,GAAG,GAAG,GAAG;QACf,OAAOwB,MAAM,CAACP,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAAC,IAAI,CAACd,KAAK,EAAEe,SAAS,CAAC,CAAC;;KAE9E,MAAM,IAAI,IAAI,CAACf,KAAK,KAAK,IAAI,IAAI,OAAO,IAAI,CAACA,KAAK,KAAK,QAAQ,EAAE;MAChE;MACA,IAAI,IAAI,CAACQ,OAAO,CAACG,KAAK,KAAK,YAAY,EAAE;QACvC;QACA,KAAK,MAAMd,GAAG,IAAIyB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACvB,KAAK,CAAC,EAAE;UACzC,MAAMwB,OAAO,GAAG,IAAI,CAACxB,KAAK,CAACH,GAAG,CAAC;UAC/B,IAAI2B,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKZ,SAAS,EAAE;YAC7CuB,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC,GAAG,IAAI,CAACrB,IAAI,IAAIV,GAAG,GAAG,EAAE,IAAI,CAACiB,cAAc,CAACU,OAAO,CAAC,CAAC;;;OAGjF,MAAM,IAAI,IAAI,CAAChB,OAAO,CAACK,OAAO,EAAE;QAC/B;QACA,KAAK,MAAMhB,GAAG,IAAIyB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACvB,KAAK,CAAC,EAAE;UACzC,MAAMwB,OAAO,GAAG,IAAI,CAACxB,KAAK,CAACH,GAAG,CAAC;UAC/B,IAAI2B,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKZ,SAAS,EAAE;YAC7CuB,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC/B,GAAG,EAAE,IAAI,CAACiB,cAAc,CAACU,OAAO,CAAC,CAAC;;;OAG9D,MAAM;QACL;QACA,MAAMH,KAAK,GAAU,EAAE;QACvB,KAAK,MAAMxB,GAAG,IAAIyB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACvB,KAAK,CAAC,EAAE;UACzC,MAAMwB,OAAO,GAAG,IAAI,CAACxB,KAAK,CAACH,GAAG,CAAC;UAC/B,IAAI2B,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKZ,SAAS,EAAE;YAC7CS,KAAK,CAACI,IAAI,CAAC5B,GAAG,CAAC;YACfwB,KAAK,CAACI,IAAI,CAACD,OAAO,CAAC;;;QAGvBW,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAACO,KAAK,CAAC,CAAC;;KAEhE,MAAM,IAAI,IAAI,CAACrB,KAAK,KAAK,IAAI,IAAI,IAAI,CAACA,KAAK,KAAKY,SAAS,EAAE;MAC1D;MACAuB,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAAC,IAAI,CAACd,KAAK,CAAC,CAAC;;IAEpE,OAAOmC,MAAM;EACf;;AAGF;;;AAGA,MAAMC,eAAgB,SAAQ/B,SAAS;EACrCC,YAAYC,IAAY,EAAEP,KAAU,EAAEQ,OAAyB;IAC7D,KAAK,CAACD,IAAI,EAAEP,KAAK,EAAEQ,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;EAC9C;EAEAoB,MAAM,CAACS,OAAoB;IACzB,IAAI,IAAI,CAACrC,KAAK,KAAK,IAAI,IAAI,IAAI,CAACA,KAAK,KAAKY,SAAS,EAAE;MACnD,IAAI,IAAI,CAACZ,KAAK,YAAYgB,KAAK,EAAE;QAC/B,KAAK,MAAME,CAAC,IAAI,IAAI,CAAClB,KAAK,EAAE;UAC1BqC,OAAO,GAAGA,OAAO,CAACT,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAACI,CAAC,CAAC,CAAC;;OAE9D,MAAM;QACLmB,OAAO,GAAGA,OAAO,CAACT,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAAC,IAAI,CAACd,KAAK,CAAC,CAAC;;;IAGxE,OAAOqC,OAAO;EAChB;;AAGF;;;AAGA,OAAM,MAAOC,cAAc;EAQzBhC,YACSiC,OAAe,EACfC,aAAqB,EACrBC,MAAc;IAFd,YAAO,GAAPF,OAAO;IACP,kBAAa,GAAbC,aAAa;IACb,WAAM,GAANC,MAAM;IATP,UAAK,GAAG,IAAIC,GAAG,EAAyB;IACxC,WAAM,GAAG,IAAIA,GAAG,EAA0B;IAC1C,YAAO,GAAG,IAAIA,GAAG,EAA2B;EAQpD;EAEA;;;EAGAb,IAAI,CAACtB,IAAY,EAAEP,KAAU,EAAEQ,OAA0B;IACvD,IAAI,CAACmC,KAAK,CAACC,GAAG,CAACrC,IAAI,EAAE,IAAIoB,aAAa,CAACpB,IAAI,EAAEP,KAAK,EAAEQ,OAAO,IAAI,EAAE,CAAC,CAAC;EACrE;EAEA;;;EAGAqC,KAAK,CAACtC,IAAY,EAAEP,KAAU,EAAEQ,OAA0B;IACxD,IAAI,CAACsC,MAAM,CAACF,GAAG,CAACrC,IAAI,EAAE,IAAI2B,cAAc,CAAC3B,IAAI,EAAEP,KAAK,EAAEQ,OAAO,IAAI,EAAE,CAAC,CAAC;EACvE;EAEA;;;EAGAuC,MAAM,CAACxC,IAAY,EAAEP,KAAU,EAAEQ,OAA0B;IACzD,IAAI,CAACwC,OAAO,CAACJ,GAAG,CAACrC,IAAI,EAAE,IAAI6B,eAAe,CAAC7B,IAAI,EAAEP,KAAK,EAAEQ,OAAO,IAAI,EAAE,CAAC,CAAC;EACzE;EAEA;;;EAGAyC,IAAI,CAACjD,KAAU,EAAEkD,WAAW,GAAG,kBAAkB;IAC/C,IAAIlD,KAAK,YAAYmD,IAAI,EAAE;MACzB,IAAI,CAACC,gBAAgB,GAAGpD,KAAK,CAACqD,IAAI;KACnC,MAAM;MACL,IAAI,CAACD,gBAAgB,GAAGF,WAAW;;IAErC,IAAI,IAAI,CAACE,gBAAgB,KAAK,mCAAmC,IAAIpD,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAChH;MACA,MAAMsD,KAAK,GAA4B,EAAE;MACzC,KAAK,MAAMzD,GAAG,IAAIyB,MAAM,CAACC,IAAI,CAACvB,KAAK,CAAC,EAAE;QACpC,IAAIuD,GAAG,GAAGvD,KAAK,CAACH,GAAG,CAAC;QACpB,IAAI,EAAE0D,GAAG,YAAYvC,KAAK,CAAC,EAAE;UAC3BuC,GAAG,GAAG,CAACA,GAAG,CAAC;;QAEb,KAAK,MAAMrC,CAAC,IAAIqC,GAAG,EAAE;UACnB,MAAMC,SAAS,GAAG,IAAI,CAACC,aAAa,CAACvC,CAAC,CAAC;UACvC,IAAIsC,SAAS,KAAK,IAAI,EAAE;YACtBF,KAAK,CAAC7B,IAAI,CAAC,CAAC5B,GAAG,EAAE2D,SAAS,CAAC,CAAC;;;;MAIlC,IAAI,CAACE,YAAY,GAAGJ,KAAK,CAACrC,GAAG,CAAC0C,CAAC,IAAI,GAAG7D,kBAAkB,CAAC6D,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI7D,kBAAkB,CAAC6D,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAACvC,IAAI,CAAC,GAAG,CAAC;KACxG,MAAM,IAAI,IAAI,CAACgC,gBAAgB,KAAK,qBAAqB,EAAE;MAC1D;MACA,MAAMQ,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/B,IAAI7D,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKY,SAAS,EAAE;QACzC,KAAK,MAAMf,GAAG,IAAIyB,MAAM,CAACC,IAAI,CAACvB,KAAK,CAAC,EAAE;UACpC,MAAMuD,GAAG,GAAGvD,KAAK,CAACH,GAAG,CAAC;UACtB,IAAI0D,GAAG,YAAYvC,KAAK,EAAE;YACxB,KAAK,MAAME,CAAC,IAAIqC,GAAG,EAAE;cACnB,MAAMO,QAAQ,GAAG,IAAI,CAACL,aAAa,CAACvC,CAAC,CAAC;cACtC,IAAI4C,QAAQ,KAAK,IAAI,EAAE;gBACrBF,QAAQ,CAAChC,MAAM,CAAC/B,GAAG,EAAEiE,QAAQ,CAAC;;;WAGnC,MAAM;YACL,MAAMA,QAAQ,GAAG,IAAI,CAACL,aAAa,CAACF,GAAG,CAAC;YACxC,IAAIO,QAAQ,KAAK,IAAI,EAAE;cACrBF,QAAQ,CAAChB,GAAG,CAAC/C,GAAG,EAAEiE,QAAQ,CAAC;;;;;MAKnC,IAAI,CAACJ,YAAY,GAAGE,QAAQ;KAC7B,MAAM;MACL;MACA,IAAI,CAACF,YAAY,GAAG1D,KAAK;;EAE7B;EAEQyD,aAAa,CAACzD,KAAU;IAC9B,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKY,SAAS,EAAE;MACzC,OAAO,IAAI;;IAEb,IAAIZ,KAAK,YAAYmD,IAAI,EAAE;MACzB,OAAOnD,KAAK;;IAEd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO+D,IAAI,CAACC,SAAS,CAAChE,KAAK,CAAC;;IAE9B,OAAO0B,MAAM,CAAC1B,KAAK,CAAC;EACtB;EAEA;;;EAGAiE,KAAK,CAAUzD,OAYd;IAECA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAEvB;IACA,IAAIqB,IAAI,GAAG,IAAI,CAACW,aAAa;IAC7B,KAAK,MAAM0B,SAAS,IAAI,IAAI,CAACvB,KAAK,CAACwB,MAAM,EAAE,EAAE;MAC3CtC,IAAI,GAAGqC,SAAS,CAACtC,MAAM,CAACC,IAAI,CAAC;;IAE/B,MAAMuC,GAAG,GAAG,IAAI,CAAC7B,OAAO,GAAGV,IAAI;IAE/B;IACA,IAAIwC,UAAU,GAAG,IAAI5E,UAAU,CAAC;MAC9B6E,OAAO,EAAElE;KACV,CAAC;IACF,KAAK,MAAMmE,UAAU,IAAI,IAAI,CAACzB,MAAM,CAACqB,MAAM,EAAE,EAAE;MAC7CE,UAAU,GAAGE,UAAU,CAAC3C,MAAM,CAACyC,UAAU,CAAC;;IAG5C;IACA,IAAIG,WAAW,GAAG,IAAI9E,WAAW,EAAE;IACnC,IAAIc,OAAO,CAACiE,MAAM,EAAE;MAClBD,WAAW,GAAGA,WAAW,CAAC5C,MAAM,CAAC,QAAQ,EAAEpB,OAAO,CAACiE,MAAM,CAAC;;IAE5D,KAAK,MAAMC,WAAW,IAAI,IAAI,CAAC1B,OAAO,CAACmB,MAAM,EAAE,EAAE;MAC/CK,WAAW,GAAGE,WAAW,CAAC9C,MAAM,CAAC4C,WAAW,CAAC;;IAG/C;IACA,IAAI,IAAI,CAACpB,gBAAgB,IAAI,EAAE,IAAI,CAACM,YAAY,YAAYG,QAAQ,CAAC,EAAE;MACrEW,WAAW,GAAGA,WAAW,CAAC5B,GAAG,CAAC,cAAc,EAAE,IAAI,CAACQ,gBAAgB,CAAC;;IAGtE;IACA,OAAO,IAAI5D,WAAW,CAAI,IAAI,CAACiD,MAAM,CAACkC,WAAW,EAAE,EAAEP,GAAG,EAAE,IAAI,CAACV,YAAY,EAAE;MAC3EvB,MAAM,EAAEkC,UAAU;MAClBhC,OAAO,EAAEmC,WAAW;MACpBI,YAAY,EAAEpE,OAAO,CAACoE,YAAY;MAClCC,cAAc,EAAErE,OAAO,CAACqE,cAAc;MACtCC,OAAO,EAAEtE,OAAO,CAACsE;KAClB,CAAC;EACJ","names":["HttpRequest","HttpParams","HttpHeaders","ParameterCodec","encodeKey","key","encodeURIComponent","encodeValue","value","decodeKey","decodeURIComponent","decodeValue","ParameterCodecInstance","Parameter","constructor","name","options","defaultStyle","defaultExplode","style","undefined","explode","serializeValue","separator","Array","map","v","split","join","array","Object","keys","propVal","push","String","PathParameter","append","path","prefix","alreadySerialized","replace","result","QueryParameter","params","HeaderParameter","headers","RequestBuilder","rootUrl","operationPath","method","Map","_path","set","query","_query","header","_header","body","contentType","Blob","_bodyContentType","type","pairs","val","formValue","formDataValue","_bodyContent","p","formData","FormData","toAppend","JSON","stringify","build","pathParam","values","url","httpParams","encoder","queryParam","httpHeaders","accept","headerParam","toUpperCase","responseType","reportProgress","context"],"sourceRoot":"","sources":["/Users/vegas/Developer/Flights/Flights/ClientApp/src/app/api/request-builder.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}