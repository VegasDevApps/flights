{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/services\";\nimport * as i2 from \"@angular/router\";\nexport class BookFlightResolver {\n  constructor(flightService, router) {\n    this.flightService = flightService;\n    this.router = router;\n  }\n  resolve(route, state) {\n    const id = route.paramMap.get('flightId') ?? '';\n    return this.flightService.findFlight$Json({\n      id\n    }).pipe(map(f => {\n      if (!f) this.router.navigate(['/not-found']);\n      return f;\n    }));\n    // const id = route.paramMap.get('flightId');\n    // console.log('Vegas: ', id);\n    // if(id){\n    //   this.flightService.findFlight$Json({id}).subscribe(f => {\n    //     if(f) return f;\n    //     this.router.navigate(['/not-found']);\n    //     return EMPTY;\n    //   })\n    // }\n    // this.router.navigate(['/not-found']);\n    // return EMPTY;\n  }\n}\n\nBookFlightResolver.ɵfac = function BookFlightResolver_Factory(t) {\n  return new (t || BookFlightResolver)(i0.ɵɵinject(i1.FlightService), i0.ɵɵinject(i2.Router));\n};\nBookFlightResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookFlightResolver,\n  factory: BookFlightResolver.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAMA,SAA4BA,GAAG,QAAY,MAAM;;;;AAOjD,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,aAA4B,EAAUC,MAAc;IAApD,kBAAa,GAAbD,aAAa;IAAyB,WAAM,GAANC,MAAM;EAAU;EAE1EC,OAAO,CAACC,KAA6B,EAAEC,KAA0B;IAC/D,MAAMC,EAAE,GAAGF,KAAK,CAACG,QAAQ,CAACC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE;IAC/C,OAAO,IAAI,CAACP,aAAa,CAACQ,eAAe,CAAC;MAACH;IAAE,CAAC,CAAC,CAACI,IAAI,CAACZ,GAAG,CAACa,CAAC,IAAG;MAC3D,IAAG,CAACA,CAAC,EACH,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACtC,OAAOD,CAAC;IACV,CAAC,CAAC,CAAC;IAEH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;;AAvBWZ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAc,SAAlBd,kBAAkB;EAAAe,YAFjB;AAAM","names":["map","BookFlightResolver","constructor","flightService","router","resolve","route","state","id","paramMap","get","findFlight$Json","pipe","f","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/vegas/Developer/Flights/Flights/ClientApp/src/app/book-flight/book-flight.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { EMPTY, Observable, map, of } from 'rxjs';\nimport { FlightRm } from '../api/models';\nimport { FlightService } from '../api/services';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookFlightResolver implements Resolve<FlightRm> {\n\n  constructor(private flightService: FlightService, private router: Router){}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FlightRm>  {\n    const id = route.paramMap.get('flightId') ?? '';\n    return this.flightService.findFlight$Json({id}).pipe(map(f => {\n      if(!f) \n        this.router.navigate(['/not-found']);\n      return f;\n    }));\n\n    // const id = route.paramMap.get('flightId');\n    // console.log('Vegas: ', id);\n    // if(id){\n    //   this.flightService.findFlight$Json({id}).subscribe(f => {\n    //     if(f) return f;\n    //     this.router.navigate(['/not-found']);\n    //     return EMPTY;\n    //   })\n    // }\n    // this.router.navigate(['/not-found']);\n    // return EMPTY;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}