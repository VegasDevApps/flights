{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\n   * Path part for operation searchFlight\n   */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFlight$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Plain(params, context) {\n    return this.searchFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFlight$Json()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Json$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFlight$Json$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Json(params, context) {\n    return this.searchFlight$Json$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightService.SearchFlightPath = '/Flight';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,YAAY,QAAqB,sBAAsB;AAC5E,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,GAAG,EAAEC,MAAM,QAAQ,gBAAgB;;;;AAO5C,OAAM,MAAOC,aAAc,SAAQJ,WAAW;EAC5CK,YACEC,MAAwB,EACxBC,IAAgB;IAEhB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;;;EAKA;;;;;;EAMAC,2BAA2B,CAACC,MAC3B,EACDC,OAAqB;IAInB,MAAMC,EAAE,GAAG,IAAIV,cAAc,CAAC,IAAI,CAACW,OAAO,EAAER,aAAa,CAACS,gBAAgB,EAAE,KAAK,CAAC;IAClF,IAAIJ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE,YAAY;MACpBP,OAAO,EAAEA;KACV,CAAC,CAAC,CAACQ,IAAI,CACNf,MAAM,CAAEgB,CAAM,IAAKA,CAAC,YAAYpB,YAAY,CAAC,EAC7CG,GAAG,CAAEiB,CAAoB,IAAI;MAC3B,OAAOA,CAAwC;IACjD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAC,kBAAkB,CAACX,MAClB,EACDC,OAAqB;IAInB,OAAO,IAAI,CAACF,2BAA2B,CAACC,MAAM,EAACC,OAAO,CAAC,CAACQ,IAAI,CAC1DhB,GAAG,CAAEiB,CAAsC,IAAKA,CAAC,CAACE,IAAuB,CAAC,CAC3E;EACH;EAEA;;;;;;EAMAC,0BAA0B,CAACb,MAC1B,EACDC,OAAqB;IAInB,MAAMC,EAAE,GAAG,IAAIV,cAAc,CAAC,IAAI,CAACW,OAAO,EAAER,aAAa,CAACS,gBAAgB,EAAE,KAAK,CAAC;IAClF,IAAIJ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE,WAAW;MACnBP,OAAO,EAAEA;KACV,CAAC,CAAC,CAACQ,IAAI,CACNf,MAAM,CAAEgB,CAAM,IAAKA,CAAC,YAAYpB,YAAY,CAAC,EAC7CG,GAAG,CAAEiB,CAAoB,IAAI;MAC3B,OAAOA,CAAwC;IACjD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAI,iBAAiB,CAACd,MACjB,EACDC,OAAqB;IAInB,OAAO,IAAI,CAACY,0BAA0B,CAACb,MAAM,EAACC,OAAO,CAAC,CAACQ,IAAI,CACzDhB,GAAG,CAAEiB,CAAsC,IAAKA,CAAC,CAACE,IAAuB,CAAC,CAC3E;EACH;;AArGWjB,aAAc,CAWTS,gBAAgB,GAAG,SAAS;AAXjCT,aAAc;mBAAdA,aAAa;AAAA;AAAbA,aAAc;SAAdA,aAAa;EAAAoB,SAAbpB,aAAa;EAAAqB,YAFZ;AAAM","names":["HttpResponse","BaseService","RequestBuilder","map","filter","FlightService","constructor","config","http","searchFlight$Plain$Response","params","context","rb","rootUrl","SearchFlightPath","request","build","responseType","accept","pipe","r","searchFlight$Plain","body","searchFlight$Json$Response","searchFlight$Json","factory","providedIn"],"sourceRoot":"","sources":["/Users/vegas/Developer/Flights/Flights/ClientApp/src/app/api/services/flight.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { FlightRm } from '../models/flight-rm';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FlightService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation searchFlight\n   */\n  static readonly SearchFlightPath = '/Flight';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFlight$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Plain$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<FlightRm>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<FlightRm>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Plain(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<FlightRm>> {\n\n    return this.searchFlight$Plain$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<FlightRm>>) => r.body as Array<FlightRm>)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFlight$Json()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Json$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<FlightRm>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<FlightRm>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFlight$Json$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Json(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<FlightRm>> {\n\n    return this.searchFlight$Json$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<FlightRm>>) => r.body as Array<FlightRm>)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}