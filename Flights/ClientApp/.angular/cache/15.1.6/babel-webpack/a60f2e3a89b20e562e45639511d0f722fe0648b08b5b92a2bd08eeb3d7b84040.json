{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/services\";\nimport * as i2 from \"@angular/router\";\nexport class BookFlightResolver {\n  constructor(flightService, router) {\n    this.flightService = flightService;\n    this.router = router;\n  }\n  resolve(route, state) {\n    const id = route.paramMap.get('id');\n    console.log('Vegas: ', id);\n    if (id) {\n      this.flightService.findFlight$Json({\n        id\n      }).subscribe(f => {\n        if (f) return f;\n        this.router.navigate(['/not-found']);\n        return EMPTY;\n      });\n    }\n    this.router.navigate(['/not-found']);\n    return EMPTY;\n  }\n}\nBookFlightResolver.ɵfac = function BookFlightResolver_Factory(t) {\n  return new (t || BookFlightResolver)(i0.ɵɵinject(i1.FlightService), i0.ɵɵinject(i2.Router));\n};\nBookFlightResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookFlightResolver,\n  factory: BookFlightResolver.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAMA,SAASA,KAAK,QAAwB,MAAM;;;;AAO5C,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,aAA4B,EAAUC,MAAc;IAApD,kBAAa,GAAbD,aAAa;IAAyB,WAAM,GAANC,MAAM;EAAU;EAE1EC,OAAO,CAACC,KAA6B,EAAEC,KAA0B;IAE/D,MAAMC,EAAE,GAAGF,KAAK,CAACG,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACnCC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEJ,EAAE,CAAC;IAC1B,IAAGA,EAAE,EAAC;MACJ,IAAI,CAACL,aAAa,CAACU,eAAe,CAAC;QAACL;MAAE,CAAC,CAAC,CAACM,SAAS,CAACC,CAAC,IAAG;QACrD,IAAGA,CAAC,EAAE,OAAOA,CAAC;QACd,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;QACpC,OAAOhB,KAAK;MACd,CAAC,CAAC;;IAEJ,IAAI,CAACI,MAAM,CAACY,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IACpC,OAAOhB,KAAK;EACd;;AAjBWC,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAgB,SAAlBhB,kBAAkB;EAAAiB,YAFjB;AAAM","names":["EMPTY","BookFlightResolver","constructor","flightService","router","resolve","route","state","id","paramMap","get","console","log","findFlight$Json","subscribe","f","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/vegas/Developer/Flights/Flights/ClientApp/src/app/book-flight/book-flight.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { FlightRm } from '../api/models';\nimport { FlightService } from '../api/services';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookFlightResolver implements Resolve<FlightRm> {\n\n  constructor(private flightService: FlightService, private router: Router){}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FlightRm>  {\n    \n    const id = route.paramMap.get('id');\n    console.log('Vegas: ', id);\n    if(id){\n      this.flightService.findFlight$Json({id}).subscribe(f => {\n        if(f) return f;\n        this.router.navigate(['/not-found']);\n        return EMPTY;\n      })\n    }\n    this.router.navigate(['/not-found']);\n    return EMPTY;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}